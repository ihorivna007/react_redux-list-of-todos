{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["currentTodoActions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterActions","filterReducer","todosAction","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","onChosenTodo","crossClicked","filteredTodos","dispatch","selectedTodo","completed","title","toLowerCase","includes","className","map","id","higtlightEye","onClick","selectButtonClick","TodoFilter","onChosenFilter","onQuery","onChange","e","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","handleDeleteClick","useState","user","setUser","useEffect","fetchUser","a","response","href","email","name","App","openTodo","setOpenTodo","setCrossClicked","fetchData","todosFromServer","data","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d01efad0.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const currentTodoActions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR_QUERY';\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filter/CLEAR_QUERY',\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype Action = SetQueryAction | ClearQueryAction | SetStatusAction;\n\ntype Filter = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: Filter = initialState,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/CLEAR_QUERY':\n      return { ...state, query: '' };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return initialState;\n  }\n};\n\nexport const filterActions = { setQuery, clearQuery, setStatus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]):SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const todosAction = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n  filter: string,\n  query: string,\n  onChosenTodo: (todo: Todo) => void,\n  crossClicked: boolean,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  filter,\n  query,\n  onChosenTodo,\n  crossClicked,\n}) => {\n  let filteredTodos = [...todos];\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  if (filter !== 'all') {\n    const completed = filter === 'completed';\n\n    filteredTodos = filteredTodos.filter(\n      todo => todo.completed === completed,\n    );\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(\n      todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n    );\n  }\n\n  const selectButtonClick = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map((todo: Todo) => {\n          const { id, title, completed } = todo;\n          const higtlightEye = selectedTodo?.id === id && crossClicked;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={higtlightEye ? 'has-background-info-light' : ''}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={completed ? 'has-text-success' : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onChosenTodo(todo);\n                    selectButtonClick(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={`far fa-eye${higtlightEye ? '-slash' : ''}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../../types/Status';\n\ntype Props = {\n  onChosenFilter: (data: Status) => void,\n  onQuery: (data: string) => void,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onChosenFilter,\n  onQuery,\n  query,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => onChosenFilter(e.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => onQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo,\n  handleDeleteClick: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, handleDeleteClick }) => {\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = todo;\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await getUser(todo.userId);\n\n      setUser(response);\n    };\n\n    fetchUser();\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(user === null) ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleDeleteClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={user.email}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { todosAction } from './features/todos';\nimport { currentTodoActions } from './features/currentTodo';\nimport { filterActions } from './features/filter';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [openTodo, setOpenTodo] = useState<boolean>(false);\n  const [crossClicked, setCrossClicked] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosAction.setTodos(todosFromServer));\n    };\n\n    fetchData();\n  }, []);\n\n  const onChosenFilter = (data: Status) => {\n    dispatch(filterActions.setStatus(data));\n  };\n\n  const onQuery = (data: string) => {\n    dispatch(filterActions.setQuery(data));\n  };\n\n  const onChosenTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n    setOpenTodo(true);\n    setCrossClicked(true);\n  };\n\n  const todoModalClick = () => {\n    setOpenTodo(false);\n    setCrossClicked(false);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChosenFilter={onChosenFilter}\n                onQuery={onQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={todos}\n                    filter={status}\n                    query={query}\n                    onChosenTodo={onChosenTodo}\n                    crossClicked={crossClicked}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      { selectedTodo && openTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          handleDeleteClick={todoModalClick}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}